/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@9.1.0'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: Kickstart [Production Source Project]
 * Environment: Kickstart Sample Apps Complete
 * Id: 979bdb48-cb15-00cd-a705-d46c4aab2041
 * 
 * -------------------------------------------------------------------------------
 */

import type { ArticleType } from "../types/article.generated.ts"
import type { EventType } from "../types/event.generated.ts"
import type { LandingPageType } from "../types/landing-page.generated.ts"
import type { SolutionType } from "../types/solution.generated.ts"
import type { VideoType } from "../types/video.generated.ts"

/*
 * Array of all type codenames
 */
export const typeCodenames = ["solution", "event", "video", "landing_page", "article"] as const

/*
 * Type representing all type codenames
 */
export type TypeCodenames = (typeof typeCodenames)[number]

/*
 * Typeguard for type codename
 */
export function isTypeCodename(value: string | undefined | null): value is TypeCodenames {
  return typeof value === "string" && (typeCodenames as readonly string[]).includes(value)
}

/*
 * Core content type with narrowed types. Use this instead of'IContentItem' for increased type safety.
 */
export type CoreType = SolutionType | EventType | VideoType | LandingPageType | ArticleType

/*
 * Type mapping for codename & type. Can be used for type safe access to type based on the codename of type.
 */
export type CodenameTypeMapping = {
  readonly solution: SolutionType
  readonly event: EventType
  readonly video: VideoType
  readonly landing_page: LandingPageType
  readonly article: ArticleType
}

/*
 * Helper type that returns type based on the codename of type.
 */
export type CodenameTypeMapper<TTypeCodename extends TypeCodenames> = TTypeCodename extends keyof CodenameTypeMapping
  ? CodenameTypeMapping[TTypeCodename]
  : CoreType
